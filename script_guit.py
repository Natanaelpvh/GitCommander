import os
import subprocess
import json


class GitConfig:
    """
    Respons√°vel por carregar e salvar configura√ß√µes do caminho do projeto
    em um arquivo JSON.
    """
    CONFIG_PATH = "config.json"

    @staticmethod
    def carregar():
        """Carrega o caminho do projeto salvo em config.json."""
        if os.path.exists(GitConfig.CONFIG_PATH):
            try:
                with open(GitConfig.CONFIG_PATH, 'r') as f:
                    dados = json.load(f)
                    if os.path.isdir(dados.get("projeto_path", "")):
                        return dados["projeto_path"]
            except Exception as e:
                print("‚ö†Ô∏è Falha ao carregar configura√ß√£o:", e)
        return None

    @staticmethod
    def salvar(path):
        """Salva o caminho do projeto atual em config.json."""
        try:
            with open(GitConfig.CONFIG_PATH, 'w') as f:
                json.dump({"projeto_path": path}, f)
        except Exception as e:
            print("‚ö†Ô∏è Erro ao salvar configura√ß√£o:", e)


class GitSSH:
    """
    Respons√°vel pela gera√ß√£o de chaves SSH e exibi√ß√£o da chave p√∫blica
    para autentica√ß√£o com o GitHub.
    """
    @staticmethod
    def gerar_chave(email):
        """
        Gera uma nova chave SSH do tipo ed25519, se n√£o existir.
        Retorna o caminho da chave p√∫blica gerada.
        """
        ssh_path = os.path.expanduser("~/.ssh/id_ed25519")
        if not os.path.exists(ssh_path):
            subprocess.run(["ssh-keygen", "-t", "ed25519", "-C", email, "-f", ssh_path, "-N", ""])
            print("‚úÖ Chave SSH gerada.")
        else:
            print("üîê Chave SSH j√° existe.")
        return ssh_path + ".pub"

    @staticmethod
    def exibir_chave(pub_key_path):
        """Exibe a chave p√∫blica gerada e orienta o usu√°rio a adicion√°-la no GitHub."""
        with open(pub_key_path, 'r') as pub_file:
            chave = pub_file.read()
        print("\nüìé Copie e cole esta chave p√∫blica no seu GitHub:")
        print(chave)
        print("Acesse: https://github.com/settings/keys\n")
        input("Pressione ENTER ap√≥s adicionar a chave...")


class GitController:
    """
    Controlador principal do sistema. Gerencia a intera√ß√£o com o usu√°rio,
    execu√ß√£o de comandos Git e opera√ß√µes de configura√ß√£o e autentica√ß√£o.
    """
    def __init__(self):
        """Inicializa o controlador e carrega as configura√ß√µes salvas."""
        self.projeto_path = GitConfig.carregar()
        if self.projeto_path:
            print(f"üìÇ Diret√≥rio restaurado: {self.projeto_path}")
        self.menu_opcoes = {
            "0": self.selecionar_diretorio,
            "1": self.detectar_mudancas,
            "2": self.commit_push,
            "3": self.git_pull,
            "4": self.criar_tag,
            "5": self.status,
            "6": self.sair,
            "7": self.configurar_ssh
        }

    def executar_comando(self, comando):
        """Executa um comando no terminal dentro do diret√≥rio selecionado."""
        if not self.projeto_path:
            print("‚ö†Ô∏è Selecione o diret√≥rio do projeto primeiro (op√ß√£o 0).")
            return
        try:
            resultado = subprocess.run(comando, capture_output=True, text=True, check=True, cwd=self.projeto_path)
            print(resultado.stdout)
        except subprocess.CalledProcessError as e:
            print("‚ùå Erro ao executar comando:")
            print(e.stderr)

    def selecionar_diretorio(self):
        """Permite selecionar o diret√≥rio do projeto Git local."""
        path = input("üìÅ Caminho do projeto (ex: C:/meu_projeto): ").strip()
        if os.path.isdir(path) and os.path.isdir(os.path.join(path, ".git")):
            self.projeto_path = path
            GitConfig.salvar(path)
            print(f"‚úÖ Diret√≥rio definido: {self.projeto_path}")
        else:
            print("‚ùå Caminho inv√°lido ou n√£o √© um reposit√≥rio Git.")

    def detectar_mudancas(self):
        """Mostra altera√ß√µes n√£o commitadas no projeto."""
        self.executar_comando(["git", "status"])

    def commit_push(self):
        """
        Adiciona arquivos, realiza commit com mensagem e envia altera√ß√µes
        para o reposit√≥rio remoto.
        """
        msg = input("üìù Mensagem do commit: ").strip()
        self.executar_comando(["git", "add", "."])
        self.executar_comando(["git", "commit", "-m", msg])
        self.verificar_url_ssh()
        self.executar_comando(["git", "push"])

    def git_pull(self):
        """Atualiza o projeto local com altera√ß√µes do reposit√≥rio remoto."""
        self.verificar_url_ssh()
        self.executar_comando(["git", "pull"])

    def criar_tag(self):
        """Cria e envia uma nova tag de vers√£o para o reposit√≥rio remoto."""
        tag = input("üè∑ Nome da nova vers√£o (ex: v1.0.0): ").strip()
        self.executar_comando(["git", "tag", tag])
        self.executar_comando(["git", "push", "origin", tag])

    def status(self):
        """Exibe o status atual do reposit√≥rio Git."""
        self.executar_comando(["git", "status"])

    def configurar_ssh(self):
        """
        Cria uma nova chave SSH (caso n√£o exista), orienta o usu√°rio a
        cadastr√°-la no GitHub e define a URL remota do reposit√≥rio.
        """
        email = input("Digite seu e-mail GitHub: ").strip()
        pub_key_path = GitSSH.gerar_chave(email)
        GitSSH.exibir_chave(pub_key_path)

        if self.projeto_path:
            repo_ssh = input("üîó Cole aqui a URL SSH do reposit√≥rio (ex: git@github.com:user/repo.git): ")
            self.executar_comando(["git", "remote", "set-url", "origin", repo_ssh])
            print("‚úÖ Reposit√≥rio configurado para SSH.")
        else:
            print("‚ö†Ô∏è Selecione o diret√≥rio primeiro.")

    def verificar_url_ssh(self):
        """Verifica se o reposit√≥rio est√° usando SSH em vez de HTTPS."""
        try:
            resultado = subprocess.run(["git", "remote", "-v"], capture_output=True, text=True, check=True, cwd=self.projeto_path)
            if "https://" in resultado.stdout:
                print("‚ö†Ô∏è Seu reposit√≥rio est√° configurado com HTTPS.")
                print("üîÅ Recomenda-se trocar para SSH com a op√ß√£o 7 (Configurar SSH).")
        except Exception as e:
            print("Erro ao verificar URL remota:", e)

    def sair(self):
        """Encerra a execu√ß√£o do programa."""
        print("üëã Saindo...")
        exit()

    def mostrar_menu(self):
        """Exibe o menu principal e aguarda a√ß√µes do usu√°rio."""
        while True:
            print("\n===== GIT CONTROLLER (POO) =====")
            print("0 - Selecionar diret√≥rio do projeto")
            print("1 - Detectar mudan√ßas")
            print("2 - Commit e Push")
            print("3 - Pull (atualizar local)")
            print("4 - Criar nova tag de vers√£o")
            print("5 - Ver status")
            print("6 - Sair")
            print("7 - Configurar autentica√ß√£o SSH")
            print("==================================")
            escolha = input("Escolha uma op√ß√£o: ").strip()
            acao = self.menu_opcoes.get(escolha)
            if acao:
                acao()
            else:
                print("‚ùå Op√ß√£o inv√°lida!")


if __name__ == "__main__":
    GitController().mostrar_menu()
